// Generated by CoffeeScript 1.8.0
var AsarArchive, crypto, fs, minimatch, mkdirp, path, queue, sortBy, stream, walkdir, zlib,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

crypto = require('crypto');

stream = require('stream');

zlib = require('zlib');

walkdir = require('walkdir');

minimatch = require('minimatch');

mkdirp = require('mkdirp');

queue = require('queue-async');

sortBy = function(prop) {
  return function(a, b) {
    if (a[prop] < b[prop]) {
      return -1;
    }
    if (a[prop] > b[prop]) {
      return 1;
    }
    return 0;
  };
};

module.exports = AsarArchive = (function() {
  AsarArchive.prototype.MAGIC = 'ASAR\r\n';

  AsarArchive.prototype.VERSION = 1;

  function AsarArchive(opts) {
    var _base;
    this.opts = opts != null ? opts : {};
    if ((_base = this.opts).minSizeToCompress == null) {
      _base.minSizeToCompress = 256;
    }
    this.reset();
    return;
  }

  AsarArchive.prototype.reset = function() {
    this._header = {
      version: this.VERSION,
      files: {}
    };
    this._headerSize = 0;
    this._offset = this.MAGIC.length;
    this._archiveSize = 0;
    this._files = [];
    this._fileNodes = [];
    this._archiveName = null;
    this._checksum = null;
    this._legacyMode = false;
  };

  AsarArchive.prototype._searchNode = function(p, create) {
    var dir, dirs, name, node, _base, _base1, _i, _len, _ref;
    if (create == null) {
      create = true;
    }
    if (_ref = p[0], __indexOf.call('/\\'.split(''), _ref) >= 0) {
      p = p.substr(1);
    }
    name = path.basename(p);
    node = this._header;
    dirs = path.dirname(p).split(path.sep);
    for (_i = 0, _len = dirs.length; _i < _len; _i++) {
      dir = dirs[_i];
      if (node == null) {
        throw new Error("" + p + " not found.");
      }
      if (dir !== '.') {
        if (create) {
          if ((_base = node.files)[dir] == null) {
            _base[dir] = {
              files: {}
            };
          }
        }
        node = node.files[dir];
      }
    }
    if (node == null) {
      throw new Error("" + p + " not found.");
    }
    if (create) {
      if ((_base1 = node.files)[name] == null) {
        _base1[name] = {};
      }
    }
    node = node.files[name];
    return node;
  };

  AsarArchive.prototype._readHeader = function(fd) {
    var checksumOfs, checksumSize, err, headerBuf, headerOfs, headerSize, headerSizeBuf, headerSizeOfs, magicBuf, magicLen, sizeBufSize;
    magicLen = this.MAGIC.length;
    magicBuf = new Buffer(magicLen);
    if (fs.readSync(fd, magicBuf, 0, magicLen, null) !== magicLen) {
      throw new Error("Unable to open archive: " + this._archiveName);
    }
    if (magicBuf.toString() !== this.MAGIC) {
      return this._readHeaderOld(fd);
    }
    sizeBufSize = 4;
    headerSizeOfs = this._archiveSize - (4 + 16 + 4);
    headerSizeBuf = new Buffer(sizeBufSize);
    if (fs.readSync(fd, headerSizeBuf, 0, sizeBufSize, headerSizeOfs) !== sizeBufSize) {
      throw new Error("Unable to read header size: " + this._archiveName);
    }
    headerSize = headerSizeBuf.readUInt32LE(0);
    headerOfs = this._archiveSize - headerSize - (4 + 16 + 4);
    headerBuf = new Buffer(headerSize);
    if (fs.readSync(fd, headerBuf, 0, headerSize, headerOfs) !== headerSize) {
      throw new Error("Unable to read header: " + this._archiveName);
    }
    this._offset = headerOfs;
    checksumSize = 16;
    checksumOfs = this._archiveSize - 16 - 4;
    this._checksum = new Buffer(checksumSize);
    if (fs.readSync(fd, this._checksum, 0, checksumSize, checksumOfs) !== checksumSize) {
      throw new Error("Unable to read checksum: " + this._archiveName);
    }
    try {
      this._header = JSON.parse(headerBuf);
    } catch (_error) {
      err = _error;
      throw new Error("Unable to parse header: " + this._archiveName);
    }
    this._headerSize = headerSize;
  };

  AsarArchive.prototype._readHeaderOld = function(fd) {
    var actualSize, err, headerBuf, headerStr, size, sizeBuf, sizeBufSize;
    this._legacyMode = true;
    sizeBufSize = 8;
    sizeBuf = new Buffer(sizeBufSize);
    if (fs.readSync(fd, sizeBuf, 0, sizeBufSize, 0) !== sizeBufSize) {
      throw new Error('Unable to read header size (assumed old format)');
    }
    size = sizeBuf.readUInt32LE(4);
    actualSize = size - 8;
    headerBuf = new Buffer(actualSize);
    if (fs.readSync(fd, headerBuf, 0, actualSize, 16) !== actualSize) {
      throw new Error('Unable to read header (assumed old format)');
    }
    try {
      headerStr = headerBuf.toString().replace(/\0+$/g, '');
      this._header = JSON.parse(headerStr);
    } catch (_error) {
      err = _error;
      throw new Error('Unable to parse header (assumed old format)');
    }
    this._headerSize = size;
  };

  AsarArchive.prototype._writeHeader = function(out, cb) {
    out.write(this.MAGIC, cb);
  };

  AsarArchive.prototype._writeFooter = function(out, cb) {
    var headerSizeBuf, headerStr;
    if (this.opts.prettyToc) {
      headerStr = JSON.stringify(this._header, null, '  ').replace(/\n/g, '\r\n');
      headerStr = "\r\n" + headerStr + "\r\n";
    } else {
      headerStr = JSON.stringify(this._header);
    }
    this._headerSize = headerStr.length;
    headerSizeBuf = new Buffer(4);
    headerSizeBuf.writeUInt32LE(this._headerSize, 0);
    out.write(headerStr, (function(_this) {
      return function() {
        out.write(headerSizeBuf, function() {
          var archiveFile, md5;
          archiveFile = fs.createReadStream(_this._archiveName);
          md5 = crypto.createHash('md5');
          archiveFile.pipe(md5);
          archiveFile.on('end', function() {
            var archiveSizeBuf;
            _this._checksum = md5.read();
            _this._archiveSize = 4 + _this._offset + _this._headerSize + 4 + 16 + 4;
            if (_this._archiveSize > 4294967295) {
              return typeof cb === "function" ? cb(new Error("archive size can not be larger than 4.2GB")) : void 0;
            }
            archiveSizeBuf = new Buffer(4);
            archiveSizeBuf.writeUInt32LE(_this._archiveSize, 0);
            out.write(_this._checksum, function() {
              out.write(archiveSizeBuf, cb);
            });
          });
        });
      };
    })(this));
  };

  AsarArchive.prototype._crawlFilesystem = function(dir, pattern, cb) {
    var paths, walker;
    paths = [];
    walker = walkdir(dir);
    walker.on('path', function(p, stat) {
      paths.push({
        name: p,
        stat: stat
      });
    });
    walker.on('end', (function(_this) {
      return function() {
        var matchFn;
        if (pattern) {
          matchFn = minimatch.filter(pattern, {
            matchBase: true
          });
          paths = paths.filter(function(a) {
            return matchFn(path.sep + path.relative(dir, a.name));
          });
        }
        paths.sort(sortBy('name'));
        return typeof cb === "function" ? cb(null, paths) : void 0;
      };
    })(this));
    walker.on('error', cb);
  };

  AsarArchive.prototype.openSync = function(archiveName) {
    var err, fd;
    this.reset();
    this._archiveName = archiveName;
    try {
      this._archiveSize = fs.lstatSync(archiveName).size;
      fd = fs.openSync(archiveName, 'r');
      this._readHeader(fd);
    } catch (_error) {
      err = _error;
      throw err;
    }
    fs.closeSync(fd);
    if ((this._header.version != null) && this._header.version > this.VERSION) {
      throw new Error("Unsupported asar format version: " + this._header.version + " (max supported: " + this.VERSION + ")");
    }
    return true;
  };

  AsarArchive.prototype.write = function(archiveName, opts, cb) {
    var out, writeFile;
    this._archiveName = archiveName;
    mkdirp.sync(path.dirname(archiveName));
    writeFile = (function(_this) {
      return function(filename, out, node, cb) {
        var gzip, realSize, src;
        realSize = 0;
        src = fs.createReadStream(filename);
        if (_this.opts.compress && node.size > _this.opts.minSizeToCompress) {
          gzip = zlib.createGzip();
          gzip.on('data', function(chunk) {
            realSize += chunk.length;
          });
          gzip.on('end', function() {
            node.offset = _this._offset;
            node.csize = realSize;
            _this._offset += realSize;
            cb();
          });
          src.pipe(gzip);
          gzip.pipe(out, {
            end: false
          });
        } else {
          src.on('data', function(chunk) {
            realSize += chunk.length;
          });
          src.on('end', function() {
            node.offset = _this._offset;
            _this._offset += realSize;
            cb();
          });
          src.pipe(out, {
            end: false
          });
        }
      };
    })(this);
    out = fs.createWriteStream(archiveName);
    this._writeHeader(out, (function(_this) {
      return function() {
        var file, i, q, _i, _len, _ref;
        q = queue(1);
        _ref = _this._files;
        for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
          file = _ref[i];
          q.defer(writeFile, file, out, _this._fileNodes[i]);
          q.awaitAll(function(err) {
            if (err) {
              return typeof cb === "function" ? cb(err) : void 0;
            }
            return _this._writeFooter(out, cb);
          });
        }
      };
    })(this));
  };

  AsarArchive.prototype.verify = function(cb) {
    var archiveFile, endOfs, md5;
    endOfs = this._offset + this._headerSize + 4 - 1;
    archiveFile = fs.createReadStream(this._archiveName, {
      start: 0,
      end: endOfs
    });
    md5 = crypto.createHash('md5');
    archiveFile.pipe(md5);
    archiveFile.on('end', (function(_this) {
      return function() {
        var actual, excpected;
        actual = md5.read().toString('hex');
        excpected = _this._checksum.toString('hex');
        cb(null, actual === excpected, {
          actual: actual,
          excpected: excpected
        });
      };
    })(this));
  };

  AsarArchive.prototype.getEntries = function(archiveRoot, pattern) {
    var files, fillFilesFromHeader, json, _ref;
    if (archiveRoot == null) {
      archiveRoot = '/';
    }
    if (pattern == null) {
      pattern = null;
    }
    if (archiveRoot.length > 1 && (_ref = archiveRoot[0], __indexOf.call('/\\'.split(''), _ref) >= 0)) {
      archiveRoot = archiveRoot.substr(1);
    }
    files = [];
    fillFilesFromHeader = function(p, json) {
      var f, fullPath;
      if ((json != null ? json.files : void 0) == null) {
        return;
      }
      for (f in json.files) {
        fullPath = path.join(p, f);
        files.push(fullPath);
        fillFilesFromHeader(fullPath, json.files[f]);
      }
    };
    if (archiveRoot === '/') {
      json = this._header;
    } else {
      json = this._searchNode(archiveRoot, false);
      if (json.size) {
        files.push(archiveRoot);
      }
      archiveRoot = "" + path.sep + archiveRoot;
    }
    fillFilesFromHeader(archiveRoot, json);
    if (pattern) {
      files = files.filter(minimatch.filter(pattern, {
        matchBase: true
      }));
    }
    return files;
  };

  AsarArchive.prototype.createReadStream = function(filename) {
    var emptyStream, end, gunzip, inStream, node, size, start;
    node = this._searchNode(filename, false);
    if (node.size > 0) {
      if (!this._legacyMode) {
        start = node.offset;
      } else {
        start = 8 + this._headerSize + parseInt(node.offset, 10);
      }
      size = node.csize || node.size;
      end = start + size - 1;
      inStream = fs.createReadStream(this._archiveName, {
        start: start,
        end: end
      });
      if (node.csize != null) {
        gunzip = zlib.createGunzip();
        inStream.pipe(gunzip);
        return gunzip;
      }
      return inStream;
    } else {
      emptyStream = stream.Readable();
      emptyStream.push(null);
      return emptyStream;
    }
  };

  AsarArchive.prototype.extract = function(dest, opts, cb) {
    var archiveRoot, destDir, destFilename, filename, filenames, node, pattern, q, relativeTo, writeStreamToFile, _i, _len, _ref, _ref1;
    if (typeof opts === 'function') {
      cb = opts;
      opts = {};
    }
    if (typeof opts === 'string') {
      opts = {
        root: opts
      };
    }
    archiveRoot = opts.root || '/';
    pattern = opts.pattern;
    filenames = this.getEntries(archiveRoot, pattern);
    if (filenames.length === 1) {
      archiveRoot = path.dirname(archiveRoot);
    } else {
      mkdirp.sync(dest);
    }
    relativeTo = archiveRoot;
    if (_ref = relativeTo[0], __indexOf.call('/\\'.split(''), _ref) >= 0) {
      relativeTo = relativeTo.substr(1);
    }
    if (_ref1 = relativeTo.slice(-1), __indexOf.call('/\\'.split(''), _ref1) >= 0) {
      relativeTo = relativeTo.slice(0, -1);
    }
    writeStreamToFile = (function(_this) {
      return function(filename, destFilename, cb) {
        var inStream, out;
        inStream = _this.createReadStream(filename);
        out = fs.createWriteStream(destFilename);
        out.on('finish', cb);
        out.on('error', cb);
        inStream.pipe(out);
      };
    })(this);
    q = queue(1);
    for (_i = 0, _len = filenames.length; _i < _len; _i++) {
      filename = filenames[_i];
      destFilename = filename;
      if (relativeTo !== '.') {
        destFilename = destFilename.replace(relativeTo, '');
      }
      destFilename = path.join(dest, destFilename);
      if (this.opts.verbose) {
        console.log("-> " + destFilename);
      }
      node = this._searchNode(filename, false);
      if (node.files) {
        q.defer(mkdirp, destFilename);
      } else {
        destDir = path.dirname(destFilename);
        q.defer(mkdirp, destDir);
        q.defer(writeStreamToFile, filename, destFilename);
      }
    }
    q.awaitAll(cb);
  };

  AsarArchive.prototype.addFile = function(filename, relativeTo, stat, content) {
    var node, p;
    if (stat == null) {
      stat = null;
    }
    if (content == null) {
      content = null;
    }
    if (stat == null) {
      stat = fs.lstatSyc(filename);
    }
    if (stat.size > 4294967295) {
      throw new Error("" + p + ": file size can not be larger than 4.2GB");
    }
    p = path.relative(relativeTo, filename);
    node = this._searchNode(p);
    node.size = stat.size;
    if (node.size === 0) {
      return;
    }
    this._files.push(filename);
    this._fileNodes.push(node);
    if (process.platform === 'win32' && stat.mode & 0x40) {
      node.executable = true;
    }
  };

  AsarArchive.prototype.addSymlink = function(filename, relativeTo, stat) {
    if (stat == null) {
      stat = null;
    }
  };

  AsarArchive.prototype.createDirectory = function(dirname) {
    var entry;
    entry = this._searchNode(dirname);
    entry.files = {};
  };

  AsarArchive.prototype.addDirectory = function(dirname, relativeTo, opts, cb) {
    if (typeof opts === 'function') {
      cb = opts;
      opts = {};
    }
    this._crawlFilesystem(dirname, opts.pattern, (function(_this) {
      return function(err, files) {
        var file, _i, _len;
        for (_i = 0, _len = files.length; _i < _len; _i++) {
          file = files[_i];
          if (_this.opts.verbose) {
            console.log("+ " + path.sep + (path.relative(relativeTo, file.name)));
          }
          if (file.stat.isDirectory()) {
            _this.createDirectory(path.relative(relativeTo, file.name));
          } else if (file.stat.isFile() || file.stat.isSymbolicLink()) {
            _this.addFile(file.name, relativeTo, file.stat);
          }
        }
        return typeof cb === "function" ? cb(null) : void 0;
      };
    })(this));
  };

  return AsarArchive;

})();
