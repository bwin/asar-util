// Generated by CoffeeScript 1.8.0
var HIGH_MAX, INT32_MAX, INT32_UINT32_MAX_DIFF, UINT32_MAX, UINT64_SIZE, bufferToNumber, fromBuffer, joinUInt64, numberToBuffer, splitUInt64, toBuffer;

UINT32_MAX = 0xFFFFFFFF;

INT32_MAX = 0x7FFFFFFF;

INT32_UINT32_MAX_DIFF = 0x80000000;

HIGH_MAX = 0x00200000;

UINT64_SIZE = 8;

splitUInt64 = function(number) {
  var high, low;
  high = 0;
  low = number & UINT32_MAX;
  if (low < 0) {
    low += INT32_UINT32_MAX_DIFF;
  }
  if (number > UINT32_MAX) {
    high = (number - low) / (UINT32_MAX + 1);
    if (high < 0) {
      high += INT32_UINT32_MAX_DIFF;
    }
  }
  return [low, high];
};

joinUInt64 = function(numvec) {
  var high, low;
  low = numvec[0], high = numvec[1];
  if (low < 0) {
    low += INT32_UINT32_MAX_DIFF;
  }
  if (high < 0) {
    high += INT32_UINT32_MAX_DIFF;
  }
  if (high > HIGH_MAX) {
    throw new Error('Number is too big.');
  }
  return low + high * (UINT32_MAX + 1);
};

toBuffer = function(numvec) {
  var buf, high, low;
  low = numvec[0], high = numvec[1];
  buf = new Buffer(UINT64_SIZE);
  buf.writeUInt32LE(low, 0);
  buf.writeUInt32LE(high, 4);
  return buf;
};

fromBuffer = function(buf) {
  return [buf.readUInt32LE(0), buf.readUInt32LE(4)];
};

numberToBuffer = function(number) {
  return toBuffer(splitUInt64(number));
};

bufferToNumber = function(buf) {
  return joinUInt64(fromBuffer(buf));
};

module.exports = {
  numberToBuffer: numberToBuffer,
  bufferToNumber: bufferToNumber
};
