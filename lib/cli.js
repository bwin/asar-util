// Generated by CoffeeScript 1.8.0
var archive, argv, asar, entries, entry, err, fs, generalError, help, input, inputStat, line, metadata, minimist, os, output, path, pkg, quiet, root, showHelp, showList, showListSize, showVersion, usageError, verbose, verify, _i, _len;

fs = require('fs');

os = require('os');

path = require('path');

minimist = require('minimist');

asar = require('./asar');

pkg = require('../package');

argv = minimist(process.argv.slice(2), {
  string: ['_'],
  boolean: 'h help v version w l list s verify verbose q quiet'.split(' '),
  "default": {
    root: '/'
  }
});

help = function() {
  return console.log("" + pkg.name + " [input] [output] [options]\nParameter:\ninput               path to archive or directory\noutput              path to archive or directory\nor if you prefer, you can set these with:\n-i, --in <path>     specify input (can be archive or directory)\n-o, --out <path>    specify output (can be archive or directory)\nOptions:\n-h, --help          show help and exit\n-v, --version       show version and exit\n-a, --add <path>    path to directory to add to archive\n-r, --root <path>   set root path in archive\n-w, --overwrite     overwrite files\n-l, --list          list archive entries\n-s, --size          also list size\n    --verify        verify archive integrity\n    --verbose       more feedback\n-q, --quiet         no feedback\nExamples:\ncreate archive from dir:            asar-util dir archive\nsame with named parameters:         asar-util -i dir -o archive\nextract archive to dir:             asar-util archive dir\nextract root from archive to dir:   asar-util archive dir -r root\nextract d/file from archive to dir: asar-util archive dir -r d/file\nverify archive:                     asar-util archive --verify\nlist archive entries:               asar-util archive -l\nlist archive entries for root:      asar-util archive -l -r root\nlist archive entries with size:     asar-util archive -ls");
};

usageError = function(msg) {
  console.error("usage error: " + msg + os.EOL);
  help();
  return process.exit(1);
};

generalError = function(msg) {
  console.error("" + msg + os.EOL);
  return process.exit(1);
};

showHelp = argv.help || argv.h;

showVersion = argv.version || argv.v;

input = argv.i || argv["in"] || argv._[0];

output = argv.o || argv.out || argv._[1];

root = argv.r || argv.root;

showList = argv.l || argv.list;

showListSize = argv.s || argv.size;

verify = argv.verify;

verbose = argv.verbose;

quiet = argv.q || argv.quiet;

if (showHelp) {
  help();
} else if (showVersion) {
  console.log("v" + pkg.version);
} else if (input) {
  if (showList) {
    if (output) {
      usageError('output and --list not allowed together');
    }
    if (verify) {
      usageError('output and --verify not allowed together');
    }
    if (quiet) {
      usageError('Y U MIX --list and --quiet ?! makes no sense');
    }
    if (verbose) {
      console.log("listing " + input + ":" + root);
    }
    if (showListSize) {
      try {
        archive = asar.loadArchive(input);
        entries = archive.getEntries(root);
      } catch (_error) {
        err = _error;
        generalError(err.message);
      }
      for (_i = 0, _len = entries.length; _i < _len; _i++) {
        entry = entries[_i];
        metadata = archive.getMetadata(entry);
        line = entry;
        if (metadata.files != null) {
          line += path.sep;
        }
        if (metadata.size) {
          line += "\t" + metadata.size;
        }
        console.log(line);
      }
    } else {
      try {
        entries = asar.getEntries(input, root);
      } catch (_error) {
        err = _error;
        generalError(err.message);
      }
      console.log(entries.join(os.EOL));
    }
  } else if (showListSize) {
    usageError('--size can only be used with --list');
  } else if (output) {
    inputStat = fs.lstatSync(input);
    if (inputStat.isDirectory()) {
      if (verbose) {
        console.log("packing " + input + " to " + output);
      }
      try {
        asar.createArchive(input, output, function(err) {
          if (err) {
            return generalError(err.message);
          }
        });
      } catch (_error) {
        err = _error;
        generalError(err.message);
      }
    } else {
      if (verbose) {
        console.log("extracting " + input + ":" + root + " to " + output);
      }
      try {
        asar.extractArchive(input, output, root);
      } catch (_error) {
        err = _error;
        generalError(err.message);
      }
    }
  } else {
    usageError('not enough arguments');
  }
} else {
  usageError('no input specified');
}
