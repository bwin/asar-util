// Generated by CoffeeScript 1.8.0
var archive, archiveFilename, argv, asar, destDir, destFile, entries, entry, err, help, line, metadata, minimist, os, path, pkg, srcDir, usageError, _i, _len, _ref, _ref1;

os = require('os');

path = require('path');

minimist = require('minimist');

asar = require('./asar');

pkg = require('../package');

argv = minimist(process.argv.slice(2), {
  string: ['_'],
  boolean: 'h help v version c create e extract l list s list-size a add verify q quiet verbose'.split(' '),
  "default": {
    root: '/'
  }
});

help = function() {
  console.log("Usage: " + pkg.name + " ...");
  console.log('-h, --help\tshow this');
  console.log('-v, --version\toutput version info');
  console.log('-c, --create <srcDir> <archive>');
  console.log('\tcreate archive from scrDir');
  console.log("\tExample: " + pkg.name + " -c some/dir whatever.asar");
  console.log('-e, --extract <archive> [--root=ROOTPATH] <destDir>');
  console.log('\tExtract archive [in ROOTPATH] to destDir');
  console.log("\tExample: " + pkg.name + " -e whatever.asar to/here");
  console.log("\tExample: " + pkg.name + " -e whatever.asar --root=only/this to/here");
  console.log('-l, --list <archive> [--root=ROOTPATH]');
  console.log('-ls, --list-size <archive> [--root=ROOTPATH]');
  console.log('\tlist files (optionally with size) in archive [in ROOTPATH]');
  console.log("\tExample: " + pkg.name + " -l whatever.asar");
  console.log("\tExample: " + pkg.name + " -l whatever.asar --root=only/this");
  return console.log("\tExample: " + pkg.name + " -ls whatever.asar --root=only/this");
};

usageError = function(msg) {
  console.error("" + msg + os.EOL);
  help();
  return process.exit(1);
};

if (argv.help || argv.h) {
  help();
} else if (argv.version || argv.v) {
  console.log("v" + pkg.version);
} else if (argv.create || argv.c) {
  if (argv._.length < 2) {
    usageError('not enough arguments for packing');
  }
  _ref = argv._, srcDir = _ref[0], destFile = _ref[1];
  console.log("packing " + srcDir + " to " + destFile);
  asar.createArchive(srcDir, destFile, function(err) {
    if (err) {
      return usageError(err.message);
    }
  });
} else if (argv.extract || argv.e) {
  if (argv._.length < 2) {
    usageError('not enough arguments for extracting');
  }
  _ref1 = argv._, archiveFilename = _ref1[0], destDir = _ref1[1];
  console.log("extracting " + archiveFilename + " to " + destDir);
  try {
    asar.extractArchive(archiveFilename, destDir, argv.root);
  } catch (_error) {
    err = _error;
    usageError(err.message);
  }
} else if (argv['list-size'] || (argv.l && argv.s)) {
  if (argv._.length < 1) {
    usageError('not enough arguments for listing');
  }
  archiveFilename = argv._[0];
  console.log("listing " + archiveFilename + ":" + argv.root);
  archive = asar.loadArchive(archiveFilename);
  entries = archive.getEntries(argv.root);
  for (_i = 0, _len = entries.length; _i < _len; _i++) {
    entry = entries[_i];
    metadata = archive.getMetadata(entry);
    line = entry;
    if (metadata.files != null) {
      line += path.sep;
    }
    if (metadata.size) {
      line += "\t" + metadata.size;
    }
    console.log(line);
  }
} else if (argv.list || argv.l) {
  if (argv._.length < 1) {
    usageError('not enough arguments for listing');
  }
  archiveFilename = argv._[0];
  console.log("listing " + archiveFilename + ":" + argv.root);
  entries = asar.getEntries(archiveFilename, argv.root);
  console.log(entries.join(os.EOL));
} else {
  help();
}
