// Generated by CoffeeScript 1.8.0
var AsarArchiveBase, fs, minimatch, path,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

path = require('path');

minimatch = require('minimatch');

module.exports = AsarArchiveBase = (function() {
  AsarArchiveBase.prototype.MAGIC = 'ASAR\r\n';

  AsarArchiveBase.prototype.VERSION = 1;

  AsarArchiveBase.prototype.SIZELENGTH = 64 / 8;

  AsarArchiveBase.prototype.MAX_SAFE_INTEGER = 9007199254740992;

  function AsarArchiveBase(opts) {
    var _base;
    this.opts = opts != null ? opts : {};
    if ((_base = this.opts).minSizeToCompress == null) {
      _base.minSizeToCompress = 256;
    }
    this.reset();
    return;
  }

  AsarArchiveBase.prototype.reset = function() {
    this._header = {
      version: this.VERSION,
      files: {}
    };
    this._headerSize = 0;
    this._offset = this.MAGIC.length;
    this._archiveSize = 0;
    this._files = [];
    this._filesInternalName = [];
    this._fileNodes = [];
    this._archiveName = null;
    this._dirty = false;
    this._checksum = null;
    this._legacyMode = false;
  };

  AsarArchiveBase.prototype._searchNode = function(p, create) {
    var dir, dirs, name, node, _base, _base1, _i, _len, _ref;
    if (create == null) {
      create = true;
    }
    if (_ref = p[0], __indexOf.call('/\\'.split(''), _ref) >= 0) {
      p = p.substr(1);
    }
    name = path.basename(p);
    node = this._header;
    if (p === '') {
      return node;
    }
    dirs = path.dirname(p).split(path.sep);
    for (_i = 0, _len = dirs.length; _i < _len; _i++) {
      dir = dirs[_i];
      if (node == null) {
        throw new Error("" + p + " not found.");
      }
      if (dir !== '.') {
        if (create) {
          if ((_base = node.files)[dir] == null) {
            _base[dir] = {
              files: {}
            };
          }
        }
        node = node.files[dir];
      }
    }
    if (node == null) {
      throw new Error("" + p + " not found.");
    }
    if (create) {
      if ((_base1 = node.files)[name] == null) {
        _base1[name] = {};
      }
    }
    node = node.files[name];
    return node;
  };

  AsarArchiveBase.prototype.getEntries = function(archiveRoot, pattern) {
    var files, fillFilesFromHeader, node, _ref;
    if (archiveRoot == null) {
      archiveRoot = '/';
    }
    if (pattern == null) {
      pattern = null;
    }
    if (archiveRoot.length > 1 && (_ref = archiveRoot[0], __indexOf.call('/\\'.split(''), _ref) >= 0)) {
      archiveRoot = archiveRoot.substr(1);
    }
    files = [];
    fillFilesFromHeader = function(p, node) {
      var f, fullPath;
      if ((node != null ? node.files : void 0) == null) {
        return;
      }
      for (f in node.files) {
        fullPath = path.join(p, f);
        files.push(fullPath);
        fillFilesFromHeader(fullPath, node.files[f]);
      }
    };
    node = this._searchNode(archiveRoot, false);
    if (node == null) {
      throw new Error("" + archiveRoot + " not found in " + this._archiveName);
    }
    if (node.size) {
      files.push(archiveRoot);
    }
    archiveRoot = "" + path.sep + archiveRoot;
    fillFilesFromHeader(archiveRoot, node);
    if (pattern) {
      files = files.filter(minimatch.filter(pattern, {
        matchBase: true
      }));
    }
    return files;
  };


  /*
  		or addHelp = (msg, fn) -> fn.help = (-> console.log msg); fn
   */

  AsarArchiveBase.prototype.getMetadata = function(filename) {
    var node;
    node = this._searchNode(filename, false);
    return node;
  };

  AsarArchiveBase.prototype.addFile = function(filename, opts) {
    var node, p, relativeTo, stat;
    if (opts == null) {
      opts = {};
    }
    stat = opts.stat || fs.lstatSyc(filename);
    relativeTo = opts.relativeTo || path.dirname(filename);
    this._dirty = true;
    if (stat.size > this.MAX_SAFE_INTEGER) {
      throw new Error("" + p + ": file size can not be larger than 9PB");
    }
    p = path.relative(relativeTo, filename);
    node = this._searchNode(p);
    node.size = stat.size;
    if (node.size === 0) {
      return;
    }
    this._files.push(filename);
    this._filesInternalName.push(p);
    this._fileNodes.push(node);
    if (process.platform === 'win32' && stat.mode & 0x40) {
      node.executable = true;
    }
  };

  AsarArchiveBase.prototype.addSymlink = function(filename, opts) {
    var linkAbsolute, linkTo, node, p, pAbsDir, pDir, relativeTo;
    if (opts == null) {
      opts = {};
    }
    relativeTo = opts.relativeTo || path.dirname(filename);
    this._dirty = true;
    p = path.relative(relativeTo, filename);
    pDir = path.dirname(path.join(relativeTo, p));
    pAbsDir = path.resolve(pDir);
    linkAbsolute = fs.realpathSync(filename);
    linkTo = path.relative(pAbsDir, linkAbsolute);
    node = this._searchNode(p);
    node.link = linkTo;
  };

  AsarArchiveBase.prototype.createDirectory = function(dirname) {
    var entry;
    this._dirty = true;
    entry = this._searchNode(dirname);
    if (entry.files == null) {
      entry.files = {};
    }
  };

  return AsarArchiveBase;

})();
